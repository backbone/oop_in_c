# Makefile generated by command: smake.sh -t main --cflags=-fms-extensions
# This file is generated with smake.sh.
# You can use this make file with instruction make to
# use one of build mode: debug, profile, develop, release.
# No need to call make clean if You make with other mode,
# because the Makefile containes rules for automatically clean.
# Some usage examples:
# make # default mode is debug
# CFLAGS="-O2 -march=core2 -mtune=core2 -msse4.1 -mfpmath=sse -fomit-frame-pointer -pipe" LDFLAGS="-Wl,-O1" make mode=develop
# CFLAGS="-O2 -march=amdfam10 -mtune=amdfam10 -msse4a --mfpmath=sse -fomit-frame-pointer -pipe" LDFLAGS="-Wl,-O1" make mode=profile
# CFLAGS="-O2 -march=k6-2 -mtune=k6-2 -m3dnow --mfpmath=387 -fomit-frame-pointer -pipe" LDFLAGS="-Wl,-O1" make mode=release
# Report bugs to <mecareful@gmail.com>

#_________________________________
#          ENVIRONMENT           |
#________________________________|
TARGET0=main
TARGETS= $(TARGET0)
CC=cc
CXX=c++
CFLAGS := -fms-extensions $(CFLAGS)
CXXFLAGS := $(CXXFLAGS)
LDFLAGS := $(LDFLAGS)
LIBS= 
SRC=
INCLUDES= 
#________________________________________
#      BUILD SCRIPT (don't change)      |
#_______________________________________|
ifeq ($(mode),)
	mode = debug
endif
ifeq ($(mode),debug)
	CFLAGS := -O0 -g -DDEBUG -std=c99 -pedantic -Wextra -Wconversion $(CFLAGS)
	LDFLAGS := $(LDFLAGS)
endif
ifeq ($(mode),profile)
	CFLAGS := -O0 -g -DDEBUG -std=c99 -p -ftest-coverage -Wcoverage-mismatch $(CFLAGS)
	LDFLAGS := -g -p $(LDFLAGS)
endif
ifeq ($(mode),develop)
	CFLAGS := -O2 -g -DDEBUG -std=c99 $(CFLAGS)
	LDFLAGS := -O1 $(LDFLAGS)
endif
ifeq ($(mode),release)
	CFLAGS := -O2 -std=c99 $(CFLAGS)
	LDFLAGS := -O1 $(LDFLAGS)
endif

CFLAGS += -Wall $(INCLUDES)
LDFLAGS += -Wall $(LIBS)

all:
	@make change_make_options &>/dev/null
	+make $(TARGETS)

ifneq ($(mode),debug)
ifneq ($(mode),profile)
ifneq ($(mode),develop)
ifneq ($(mode),release)
	@echo "Invalid build mode."
	@echo "Please use 'make mode=release', 'make mode=develop', 'make mode=profile' or 'make mode=debug'"
	@exit 1
endif
endif
endif
endif
	@echo ".........................."
	@echo "Building on "$(mode)" mode "
	@echo "CFLAGS=$(CFLAGS)"
	@echo "LDFLAGS=$(LDFLAGS)"
	@echo ".........................."

OLD_BUILD_MODE=$(shell grep ^MODE make_options.out 2>/dev/null | sed 's~^MODE=~~')
OLD_BUILD_CFLAGS=$(shell grep ^CFLAGS make_options.out 2>/dev/null | sed 's~^CFLAGS=~~')
OLD_BUILD_LDFLAGS=$(shell grep ^LDFLAGS make_options.out 2>/dev/null | sed 's~^LDFLAGS=~~')
change_make_options:
ifneq ($(mode)|$(CFLAGS)|$(LDFLAGS), $(OLD_BUILD_MODE)|$(OLD_BUILD_CFLAGS)|$(OLD_BUILD_LDFLAGS))
	@echo CLEANING...
	@make clean
	@echo "MODE=$(mode)" > make_options.out
	@echo "CFLAGS=$(CFLAGS)" >> make_options.out
	@echo "LDFLAGS=$(LDFLAGS)" >> make_options.out
endif

%.o :
	$(CC) -c $(CFLAGS) $(SRC) -o $@ $<

clean:
	$(RM) *.o *.out callgrind.out.* *.gcno $(TARGETS)

.PHONY: all change_make_options clean

#_________________________________
#           R U L E S            |
#________________________________|
target_objs0 = \
	main.o \
	ColoredSquare.o \
	Square.o

$(TARGET0): $(target_objs0)
	$(CC) $(LDFLAGS) -o $@ $(target_objs0)


main.o: \
	main.c \
	ColoredSquare.h \
	Figure.h \
	Object.h \
	Square.h

ColoredSquare.o: \
	ColoredSquare.c \
	ColoredSquare.h \
	Figure.h \
	Object.h \
	Square.h

Square.o: \
	Square.c \
	Figure.h \
	Object.h \
	Square.h

